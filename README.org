* Certificazioni CE
  Certificazioni CE è un sito WEB che aiuta i fornitori a inviare i propri DDT all'azienda, e agli addetti al magazzino ad associargli una posizione. 

** Descrizione
  Il progetto è stato scritto interamente in Python, utilizzando il micro-framework Flask per gestire la logica, e il Jinja Template Engine per i template. 
  In aggiunta, è stato usato il Bulma CSS Framework per rendere piacevole la grafica del sito internet.
  Le documentazioni ufficiali si trovano a questi indirizzi:
  + https://jinja.palletsprojects.com/en/3.1.x/
  + https://flask.palletsprojects.com/en/2.1.x/
  + https://bulma.io/

** Stato del progetto
  Il progetto non si trova in uno stato di completezza. Di seguito, vengono inserite le feature che servono ad una finalizzazione approssimativa del sito. 
  + Gestione di più tipi di utenti. Fino ad adesso, solo il ruolo di fornitore è stato scritto. 
  + Modifica dei dati: deve essere possibile modificare dei campi di un elemento dal lato utente.
  + Upload del file DOP per utenti CE.
  + Creazione di un PDF dato il documento di trasporto di un utente.

** Come continuare il progetto
  Esistono diversi modi per continuare o partecipare allo sviluppo del progetto.
  In particolare,
  + è possibile [[eseguire un /fork/ del progetto][https://docs.github.com/en/get-started/quickstart/fork-a-repo]], continuarlo, e poi [[creare una /pull request/][https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests]] per unire il tuo con il sorgente "ufficiale" (consigliato),
  + è possibile [[clonare il repository][https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository]], lavorare sul progetto, e [[eseguire un /pull/][https://github.com/git-guides/git-pull]] delle modifiche (se si possiedono i permessi necessari),
  + è possibile scaricare il repository e continuarlo in locale, senza contribuire a questo progetto. 
  Nel caso avvenga la terza opzione, questo repository non verrà mantenuto, e sarà archiviato.

** Struttura del progetto
  Il progetto è stato volutamente strutturato senza classi ed oggetti per semplificarlo e rimuovere astrazioni superflue. 
  Tuttavia, vengono usate le classi per raccogliere i metodi sotto dei /namespace/. 
  Quindi, per utilizzare un metodo di un altro modulo, è necessario importarlo con la sua classe omonima. 

  Il progetto è strutturato quindi in una parte di template (sotto la cartella ~templates~) e una parte di logica, che si occupa de
  + l'accesso al database e i suoi dati nel file ~db.py~,
  + l'accesso agli articoli, la loro modifica e il loro inserimento nel file ~articolo.py~,
  + l'accesso ai documenti di trasporto, la loro modifica e il loro inserimento nel file ~ddt.py~,
  + la gestione degli utenti nel file ~user.py~,
  + la visualizzazione dei dati e la gestione degli indirizzi nel file ~app.py~,
  C'è anche un altro file, ~util.py~ che contiene alcune funzioni generiche. 

  Le pagine contenute in ~templates~ invece sono:
  + ~layout/father.html~, una pagina che viene estesa da tutte, nella quale viene gestito i layout base di tutte le pagine;
  + ~articoli.html~, usata per visualizzare tutti gli articoli appartenenti ad un certo documento di trasporto;
  + ~articolo_view.html~, usata per visualizzare i dettagli di un articolo e per inserire nuovi dati al suo interno;
  + ~ddt_compile.html~, usato per visualizzare il form di inserimento di un nuovo documento di traporto;
  + ~ddt_view.html~, usato per visualizzare i dettagli di un documento di trasporto;
  + ~index.html~, usata per visualizzare tutti i documenti di trasporto di un utente;
  + ~login.html~, usata per visualizzare il form di login;
  + ~new_article.html~, usato per visualizzare il form di inserimento di un nuovo articolo. 
  